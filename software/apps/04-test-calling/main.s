;
; File generated by cc65 v 2.18 - Ubuntu 2.18-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_vdp_init
	.import		_vdp_wait
	.import		_vdp_flush
	.import		_vdp_write_to_screen_xy
	.import		_vdp_read_from_screen_xy
	.import		_cgetc
	.import		_cputs
	.import		_sprintf
	.import		__heapmemavail
	.export		_x
	.export		_y
	.export		_c
	.export		_r
	.export		_i
	.export		_j
	.export		_print_buf
	.export		_scroll_up
	.export		_main

.segment	"RODATA"

L003B:
	.byte	$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D
	.byte	$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$0A,$00
L0035:
	.byte	$25,$75,$20,$62,$79,$74,$65,$73,$20,$66,$72,$65,$65,$2E,$0A,$00
L0031:
	.byte	$36,$35,$30,$32,$2D,$52,$65,$74,$72,$6F,$21,$0A,$00
L003E:
	.byte	$52,$65,$61,$64,$79,$2E,$0A,$00
L0072:
	.byte	$42,$79,$65,$2E,$0A,$00

.segment	"BSS"

_x:
	.res	1,$00
_y:
	.res	1,$00
_c:
	.res	1,$00
_r:
	.res	1,$00
_i:
	.res	1,$00
_j:
	.res	1,$00
_print_buf:
	.res	80,$00

; ---------------------------------------------------------------
; void __near__ scroll_up (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_up: near

.segment	"CODE"

	ldx     #$00
	lda     #$00
	sta     _j
	ldx     #$00
	lda     #$00
	sta     _i
L0006:	ldx     #$00
	lda     _i
	cmp     #$18
	jsr     boolult
	jne     L0009
	jmp     L0007
L0009:	ldx     #$00
	lda     #$00
	sta     _j
L000E:	ldx     #$00
	lda     _j
	cmp     #$28
	jsr     boolult
	jne     L0011
	jmp     L0008
L0011:	lda     _j
	jsr     pusha
	ldx     #$00
	lda     _i
	ina
	bne     L001A
	inx
L001A:	ldx     #$00
	jsr     _vdp_read_from_screen_xy
	sta     _r
	lda     _j
	jsr     pusha
	lda     _i
	jsr     pusha
	lda     _r
	jsr     _vdp_write_to_screen_xy
	ldx     #$00
	inc     _j
	lda     _j
	jmp     L000E
L0008:	ldx     #$00
	inc     _i
	lda     _i
	jmp     L0006
L0007:	ldx     #$00
	lda     #$00
	sta     _i
L001F:	ldx     #$00
	lda     _i
	cmp     #$28
	jsr     boolult
	jne     L0022
	jmp     L0020
L0022:	lda     _i
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #$20
	jsr     _vdp_write_to_screen_xy
	ldx     #$00
	inc     _i
	lda     _i
	jmp     L001F
L0020:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldy     #$00
	jsr     _vdp_init
	ldx     #$00
	lda     #$00
	sta     _y
	lda     #<(L0031)
	ldx     #>(L0031)
	jsr     _cputs
	lda     #<(_print_buf)
	ldx     #>(_print_buf)
	jsr     pushax
	lda     #<(L0035)
	ldx     #>(L0035)
	jsr     pushax
	jsr     __heapmemavail
	jsr     pushax
	ldy     #$06
	jsr     _sprintf
	lda     #<(_print_buf)
	ldx     #>(_print_buf)
	jsr     _cputs
	lda     #<(L003B)
	ldx     #>(L003B)
	jsr     _cputs
	lda     #<(L003E)
	ldx     #>(L003E)
	jsr     _cputs
	jmp     L0042
L0040:	ldy     #$00
	jsr     _cgetc
	sta     _c
	ldx     #$00
	lda     _c
	cmp     #$1B
	jsr     booleq
	jeq     L0046
	jmp     L0041
	jmp     L0058
L0046:	ldx     #$00
	lda     _c
	cmp     #$0D
	jsr     booleq
	jeq     L0049
	ldx     #$00
	inc     _y
	lda     _y
	ldx     #$00
	lda     #$00
	sta     _x
	jmp     L0058
L0049:	ldx     #$00
	lda     _c
	cmp     #$08
	jsr     booleq
	jeq     L004F
	ldx     #$00
	lda     _x
	cmp     #$00
	jsr     boolne
	jeq     L0051
	ldx     #$00
	dec     _x
	lda     _x
	lda     _x
	jsr     pusha
	lda     _y
	jsr     pusha
	lda     #$20
	jsr     _vdp_write_to_screen_xy
L0051:	jmp     L0058
L004F:	lda     _x
	jsr     pusha
	lda     _y
	jsr     pusha
	lda     _c
	jsr     _vdp_write_to_screen_xy
	ldx     #$00
	inc     _x
	lda     _x
L0058:	ldx     #$00
	lda     _x
	cmp     #$28
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L005E
	ldx     #$00
	lda     #$00
	sta     _x
	ldx     #$00
	inc     _y
	lda     _y
L005E:	ldx     #$00
	lda     _y
	cmp     #$18
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0063
	jsr     _scroll_up
	ldx     #$00
	lda     #$00
	sta     _x
	ldx     #$00
	lda     #$17
	sta     _y
	ldx     #$00
	lda     #$00
	sta     $0A10
L0063:	ldy     #$00
	jsr     _vdp_wait
	ldy     #$00
	jsr     _vdp_flush
L0042:	jmp     L0040
L0041:	lda     #<(L0072)
	ldx     #>(L0072)
	jsr     _cputs
	rts

.endproc

