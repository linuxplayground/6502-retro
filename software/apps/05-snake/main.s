;
; File generated by cc65 v 2.18 - Ubuntu 2.18-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_sprintf
	.import		__heapmemavail
	.import		_rand
	.import		_srand
	.import		_strlen
	.import		_memset
	.import		_vdp_init_g2
	.import		_vdp_set_write_address
	.import		_vdp_wait
	.import		_vdp_flush
	.import		_vdp_write_to_screen_xy
	.import		_vdp_read_from_screen_xy
	.import		_cputs
	.import		_cgetc_nw
	.export		_x
	.export		_y
	.export		_c
	.export		_r
	.export		_i
	.export		_j
	.export		_addr
	.export		_seed
	.export		_grow
	.export		_score
	.export		_ticks
	.export		_game_speed
	.export		_crashed
	.export		_buffer
	.export		_buffer_head
	.export		_buffer_tail
	.export		_head
	.export		_apple
	.export		_tb
	.export		_print_at_xy
	.export		_set_pattern_color
	.export		_init_game
	.export		_print_center_y
	.export		_new_apple
	.export		_menu
	.export		_new_game
	.export		_run
	.export		_main

.segment	"DATA"

_j:
	.byte	$00
_addr:
	.word	$0000
_seed:
	.word	$0000
_grow:
	.byte	$02
_score:
	.word	$0000
_ticks:
	.byte	$00
_game_speed:
	.byte	$0C
_crashed:
	.byte	$00
_buffer:
	.byte	$00
	.res	4095,$00
_buffer_head:
	.word	$0000
_buffer_tail:
	.word	$0000

.segment	"RODATA"

L0076:
	.byte	$50,$52,$45,$53,$53,$20,$41,$4E,$59,$20,$4B,$45,$59,$20,$54,$4F
	.byte	$20,$50,$4C,$41,$59,$00,$00
L0072:
	.byte	$42,$59,$20,$50,$52,$4F,$44,$55,$43,$54,$49,$4F,$4E,$2D,$44,$41
	.byte	$56,$45,$00,$00
L006E:
	.byte	$53,$4E,$41,$4B,$45,$20,$36,$35,$30,$32,$20,$2D,$20,$56,$31,$2E
	.byte	$30,$00,$00
L0150:
	.byte	$46,$72,$65,$65,$20,$6D,$65,$6D,$6F,$72,$79,$3A,$20,$25,$64,$0A
	.byte	$00,$00
L00C2:
	.byte	$45,$53,$43,$41,$50,$45,$20,$50,$52,$45,$53,$53,$45,$44,$00,$00
L00FF:
	.byte	$58,$20,$42,$6F,$75,$6E,$64,$61,$72,$79,$0A,$00,$00
L010A:
	.byte	$59,$20,$42,$6F,$75,$6E,$64,$61,$72,$79,$0A,$00,$00
L011C:
	.byte	$48,$49,$54,$20,$54,$41,$49,$4C,$0A,$00,$00
L007A:
	.byte	$53,$43,$4F,$52,$45,$3A,$20,$25,$64,$00,$00
L0084:
	.byte	$43,$52,$41,$53,$48,$45,$44,$00,$00

.segment	"BSS"

_x:
	.res	1,$00
_y:
	.res	1,$00
_c:
	.res	1,$00
_r:
	.res	1,$00
_i:
	.res	1,$00
_head:
	.res	3,$00
_apple:
	.res	2,$00
_tb:
	.res	40,$00

; ---------------------------------------------------------------
; void __near__ print_at_xy (unsigned char, unsigned char, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_at_xy: near

.segment	"CODE"

	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     shlax4
	jsr     shlax1
	jsr     pushax
	ldx     #$06
	lda     #$00
	jsr     tosaddax
	jsr     pushax
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	jsr     tosaddax
	sta     _addr
	stx     _addr+1
L0012:	lda     _addr
	ldx     _addr+1
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	ldy     #$00
	jsr     staspidx
	ldy     #$00
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	inc     _addr
	bne     L0019
	inc     _addr+1
L0019:	lda     _addr
	ldx     _addr+1
	ldy     #$01
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	cmp     #$00
	jsr     boolne
	jne     L0012
	jsr     incsp4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ set_pattern_color (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_pattern_color: near

.segment	"CODE"

	jsr     pusha
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     shlax3
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     tosaddax
	jsr     _vdp_set_write_address
	ldx     #$00
	lda     #$00
	sta     _i
L001E:	ldx     #$00
	lda     _i
	cmp     #$08
	jsr     boolult
	jne     L0021
	jmp     L001F
L0021:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     $7F40
	ldx     #$00
	inc     _i
	lda     _i
	jmp     L001E
L001F:	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_game: near

.segment	"CODE"

	ldy     #$00
	jsr     _vdp_init_g2
	ldx     #$20
	lda     #$00
	jsr     _vdp_set_write_address
	ldx     #$00
	lda     #$00
	sta     _addr
	stx     _addr+1
L002C:	lda     _addr
	ldx     _addr+1
	cpx     #$08
	jsr     boolult
	jne     L002F
	jmp     L002D
L002F:	ldx     #$00
	lda     #$E1
	sta     $7F40
	inc     _addr
	bne     L0034
	inc     _addr+1
L0034:	lda     _addr
	ldx     _addr+1
	jmp     L002C
L002D:	lda     #$01
	jsr     pusha
	lda     #$61
	jsr     _set_pattern_color
	lda     #$02
	jsr     pusha
	lda     #$61
	jsr     _set_pattern_color
	lda     #$03
	jsr     pusha
	lda     #$61
	jsr     _set_pattern_color
	lda     #$04
	jsr     pusha
	lda     #$61
	jsr     _set_pattern_color
	lda     #$05
	jsr     pusha
	lda     #$21
	jsr     _set_pattern_color
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ print_center_y (unsigned char, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_center_y: near

.segment	"CODE"

	jsr     pushax
	ldy     #$01
	jsr     ldaxysp
	jsr     _strlen
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$0F
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     shrax1
	jsr     tossubax
	ldx     #$00
	jsr     pusha
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	jsr     ldaxysp
	jsr     _print_at_xy
	jsr     incsp5
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_apple (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_apple: near

.segment	"CODE"

	lda     #$01
	jsr     pusha
	jmp     L005B
L0051:	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     tosmodax
	ldx     #$00
	sta     _x
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$18
	jsr     tosmodax
	ldx     #$00
	sta     _y
	lda     _x
	jsr     pusha
	lda     _y
	jsr     _vdp_read_from_screen_xy
	cmp     #$20
	jsr     booleq
	jeq     L005B
	ldx     #$00
	lda     #$00
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     _x
	sta     _apple
	ldx     #$00
	lda     _y
	sta     _apple+1
L005B:	ldy     #$00
	lda     (sp),y
	jne     L0051
	lda     _apple
	jsr     pusha
	lda     _apple+1
	jsr     pusha
	lda     #$05
	jsr     _vdp_write_to_screen_xy
	ldx     #$00
	lda     #$02
	sta     _grow
	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ menu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_menu: near

.segment	"CODE"

	lda     #$03
	jsr     pusha
	lda     #<(L006E)
	ldx     #>(L006E)
	jsr     _print_center_y
	lda     #$05
	jsr     pusha
	lda     #<(L0072)
	ldx     #>(L0072)
	jsr     _print_center_y
	lda     #$0D
	jsr     pusha
	lda     #<(L0076)
	ldx     #>(L0076)
	jsr     _print_center_y
	lda     #<(_tb)
	ldx     #>(_tb)
	jsr     pushax
	lda     #<(L007A)
	ldx     #>(L007A)
	jsr     pushax
	lda     _score
	ldx     _score+1
	jsr     pushax
	ldy     #$06
	jsr     _sprintf
	lda     #$07
	jsr     pusha
	lda     #<(_tb)
	ldx     #>(_tb)
	jsr     _print_center_y
	ldx     #$00
	lda     _crashed
	cmp     #$01
	jsr     booleq
	jeq     L0080
	lda     #$17
	jsr     pusha
	lda     #<(L0084)
	ldx     #>(L0084)
	jsr     _print_center_y
L0080:	ldy     #$00
	jsr     _vdp_wait
	ldy     #$00
	jsr     _vdp_flush
	ldx     #$00
	lda     #$00
	sta     _seed
	stx     _seed+1
L008A:	ldy     #$00
	jsr     _cgetc_nw
	sta     _c
	inc     _seed
	bne     L0090
	inc     _seed+1
L0090:	lda     _seed
	ldx     _seed+1
	ldx     #$00
	lda     _c
	cmp     #$00
	jsr     booleq
	jne     L008A
	ldx     #$00
	lda     _c
	cmp     #$1B
	jsr     booleq
	jeq     L0092
	ldx     #$00
	lda     #$00
	jmp     L0095
	jmp     L0095
L0092:	lda     _seed
	ldx     _seed+1
	jsr     _srand
	ldx     #$00
	lda     #$01
	jmp     L0095
L0095:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_game: near

.segment	"CODE"

	ldx     #$06
	lda     #$00
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     pushax
	ldx     #$03
	lda     #$00
	jsr     _memset
	ldx     #$00
	lda     #$00
	sta     _buffer_head
	stx     _buffer_head+1
	ldx     #$00
	lda     #$00
	sta     _buffer_tail
	stx     _buffer_tail+1
	ldx     #$00
	lda     #$0F
	sta     _head
	ldx     #$00
	lda     #$14
	sta     _head+1
	ldx     #$00
	lda     #$04
	sta     _head+2
	ldx     #$00
	lda     #$08
	sta     _game_speed
	ldx     #$00
	lda     #$00
	sta     _ticks
	ldx     #$00
	lda     #$00
	sta     _crashed
	ldx     #$00
	lda     #$02
	sta     _grow
	ldx     #$00
	lda     #$00
	sta     _score
	stx     _score+1
	jsr     _new_apple
	ldy     #$00
	jsr     _vdp_wait
	ldy     #$00
	jsr     _vdp_flush
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ run (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_run: near

.segment	"CODE"

L00B6:	ldx     #$00
	lda     _ticks
	jsr     pushax
	ldx     #$00
	lda     _game_speed
	jsr     toseqax
	jeq     L00B9
	ldy     #$00
	jsr     _cgetc_nw
	sta     _c
	ldx     #$00
	lda     _c
	cmp     #$1B
	jsr     booleq
	jeq     L00BD
	ldx     #$00
	lda     #$01
	sta     _crashed
	lda     #<(L00C2)
	ldx     #>(L00C2)
	jsr     _cputs
	jmp     L00DC
L00BD:	ldx     #$00
	lda     _c
	cmp     #$A1
	jsr     booleq
	jeq     L00C5
	ldx     #$00
	lda     _head+2
	cmp     #$04
	jsr     boolne
	jeq     L00C7
	ldx     #$00
	lda     #$03
	sta     _head+2
L00C7:	jmp     L00DC
L00C5:	ldx     #$00
	lda     _c
	cmp     #$A2
	jsr     booleq
	jeq     L00CC
	ldx     #$00
	lda     _head+2
	cmp     #$03
	jsr     boolne
	jeq     L00CE
	ldx     #$00
	lda     #$04
	sta     _head+2
L00CE:	jmp     L00DC
L00CC:	ldx     #$00
	lda     _c
	cmp     #$A3
	jsr     booleq
	jeq     L00D3
	ldx     #$00
	lda     _head+2
	cmp     #$02
	jsr     boolne
	jeq     L00D5
	ldx     #$00
	lda     #$01
	sta     _head+2
L00D5:	jmp     L00DC
L00D3:	ldx     #$00
	lda     _c
	cmp     #$A4
	jsr     booleq
	jeq     L00DC
	ldx     #$00
	lda     _head+2
	cmp     #$01
	jsr     boolne
	jeq     L00DC
	ldx     #$00
	lda     #$02
	sta     _head+2
L00DC:	ldx     #$00
	lda     _head+2
	cmp     #$03
	jsr     booleq
	jeq     L00E0
	ldx     #$00
	lda     _head
	bpl     L00E3
	dex
L00E3:	dec     _head
	jmp     L00F3
L00E0:	ldx     #$00
	lda     _head+2
	cmp     #$04
	jsr     booleq
	jeq     L00E5
	ldx     #$00
	lda     _head
	bpl     L00E8
	dex
L00E8:	inc     _head
	jmp     L00F3
L00E5:	ldx     #$00
	lda     _head+2
	cmp     #$01
	jsr     booleq
	jeq     L00EA
	ldx     #$00
	lda     _head+1
	bpl     L00ED
	dex
L00ED:	dec     _head+1
	jmp     L00F3
L00EA:	ldx     #$00
	lda     _head+2
	cmp     #$02
	jsr     booleq
	jeq     L00EF
	ldx     #$00
	lda     _head+1
	bpl     L00F2
	dex
L00F2:	inc     _head+1
	jmp     L00F3
L00EF:	ldx     #$00
	lda     #$00
	sta     _crashed
L00F3:	ldx     #$00
	lda     _head
	bpl     L00F8
	dex
L00F8:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jne     L00F7
	ldx     #$00
	lda     _head
	bpl     L00F9
	dex
L00F9:	sec
	sbc     #$20
	bvs     L00FA
	eor     #$80
L00FA:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jne     L00F7
	ldx     #$00
	lda     #$00
	jeq     L00FB
L00F7:	ldx     #$00
	lda     #$01
L00FB:	jeq     L00F6
	ldx     #$00
	lda     #$01
	sta     _crashed
	lda     #<(L00FF)
	ldx     #>(L00FF)
	jsr     _cputs
L00F6:	ldx     #$00
	lda     _head+1
	bpl     L0103
	dex
L0103:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jne     L0102
	ldx     #$00
	lda     _head+1
	bpl     L0104
	dex
L0104:	sec
	sbc     #$18
	bvs     L0105
	eor     #$80
L0105:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jne     L0102
	ldx     #$00
	lda     #$00
	jeq     L0106
L0102:	ldx     #$00
	lda     #$01
L0106:	jeq     L0101
	ldx     #$00
	lda     #$01
	sta     _crashed
	lda     #<(L010A)
	ldx     #>(L010A)
	jsr     _cputs
L0101:	lda     _head
	jsr     pusha
	lda     _head+1
	jsr     _vdp_read_from_screen_xy
	sta     _r
	ldx     #$00
	lda     _r
	cmp     #$05
	jsr     booleq
	jeq     L0110
	lda     #$05
	clc
	adc     _score
	sta     _score
	bcc     L0114
	inc     _score+1
L0114:	ldx     _score+1
	jsr     _new_apple
	jmp     L0117
L0110:	ldx     #$00
	lda     _r
	cmp     #$20
	jsr     boolne
	jeq     L0117
	ldx     #$00
	lda     #$01
	sta     _crashed
	lda     #<(L011C)
	ldx     #>(L011C)
	jsr     _cputs
L0117:	ldx     #$00
	lda     _crashed
	cmp     #$00
	jsr     booleq
	jeq     L011E
	lda     _head
	jsr     pusha
	lda     _head+1
	jsr     pusha
	lda     _head+2
	jsr     _vdp_write_to_screen_xy
	lda     _buffer_head
	ldx     _buffer_head+1
	cmp     #$01
	txa
	sbc     #$10
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0124
	ldx     #$00
	lda     #$00
	sta     _buffer_head
	stx     _buffer_head+1
L0124:	lda     #<(_buffer)
	ldx     #>(_buffer)
	clc
	adc     _buffer_head
	tay
	txa
	adc     _buffer_head+1
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _head
	ldy     #$00
	jsr     staspidx
	lda     _buffer_head
	ldx     _buffer_head+1
	ina
	bne     L012D
	inx
L012D:	clc
	adc     #<(_buffer)
	tay
	txa
	adc     #>(_buffer)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _head+1
	ldy     #$00
	jsr     staspidx
	lda     #$02
	clc
	adc     _buffer_head
	sta     _buffer_head
	bcc     L0131
	inc     _buffer_head+1
L0131:	ldx     _buffer_head+1
	ldx     #$00
	lda     _grow
	cmp     #$00
	jsr     boolne
	jeq     L0132
	ldx     #$00
	lda     _grow
	dec     _grow
	jmp     L0140
L0132:	lda     #<(_buffer)
	ldx     #>(_buffer)
	clc
	adc     _buffer_tail
	tay
	txa
	adc     _buffer_tail+1
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	jsr     pusha
	lda     _buffer_tail
	ldx     _buffer_tail+1
	ina
	bne     L013B
	inx
L013B:	clc
	adc     #<(_buffer)
	tay
	txa
	adc     #>(_buffer)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	jsr     pusha
	lda     #$20
	jsr     _vdp_write_to_screen_xy
	lda     #$02
	clc
	adc     _buffer_tail
	sta     _buffer_tail
	bcc     L013F
	inc     _buffer_tail+1
L013F:	ldx     _buffer_tail+1
	lda     _buffer_tail
	ldx     _buffer_tail+1
	cmp     #$01
	txa
	sbc     #$10
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0140
	ldx     #$00
	lda     #$00
	sta     _buffer_tail
	stx     _buffer_tail+1
L0140:	ldy     #$00
	jsr     _vdp_wait
	ldy     #$00
	jsr     _vdp_flush
	ldx     #$00
	lda     #$00
	sta     _ticks
L011E:	jmp     L0148
L00B9:	ldy     #$00
	jsr     _vdp_wait
	ldx     #$00
	lda     _ticks
	inc     _ticks
L0148:	ldx     #$00
	lda     _crashed
	cmp     #$00
	jsr     booleq
	jne     L00B6
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	jsr     _init_game
	lda     #<(_tb)
	ldx     #>(_tb)
	jsr     pushax
	lda     #<(L0150)
	ldx     #>(L0150)
	jsr     pushax
	jsr     __heapmemavail
	jsr     pushax
	ldy     #$06
	jsr     _sprintf
	lda     #<(_tb)
	ldx     #>(_tb)
	jsr     _cputs
	jmp     L015B
L0155:	jsr     _menu
	jsr     bnega
	jeq     L0159
	jmp     L0156
	jmp     L015B
L0159:	jsr     _new_game
	jsr     _run
L015B:	jmp     L0155
L0156:	rts

.endproc

