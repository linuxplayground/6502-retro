ca65 V2.18 - Ubuntu 2.18-1
Main file   : main.s
Current file: main.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.18 - Ubuntu 2.18-1
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
000000r 1               	.setcpu		"65C02"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_sprintf
000000r 1               	.import		__heapmaxavail
000000r 1               	.import		_rand
000000r 1               	.import		_srand
000000r 1               	.import		_strlen
000000r 1               	.import		_memset
000000r 1               	.import		_vdp_init_g2
000000r 1               	.import		_vdp_set_write_address
000000r 1               	.import		_vdp_wait
000000r 1               	.import		_vdp_flush
000000r 1               	.import		_vdp_write_to_screen_xy
000000r 1               	.import		_vdp_read_from_screen_xy
000000r 1               	.import		_cputs
000000r 1               	.import		_cgetc_nw
000000r 1               	.export		_x
000000r 1               	.export		_y
000000r 1               	.export		_c
000000r 1               	.export		_r
000000r 1               	.export		_i
000000r 1               	.export		_j
000000r 1               	.export		_addr
000000r 1               	.export		_seed
000000r 1               	.export		_grow
000000r 1               	.export		_score
000000r 1               	.export		_ticks
000000r 1               	.export		_game_speed
000000r 1               	.export		_crashed
000000r 1               	.export		_buffer
000000r 1               	.export		_buffer_head
000000r 1               	.export		_buffer_tail
000000r 1               	.export		_head
000000r 1               	.export		_apple
000000r 1               	.export		_tb
000000r 1               	.export		_print_at_xy
000000r 1               	.export		_set_pattern_color
000000r 1               	.export		_init_game
000000r 1               	.export		_print_center_y
000000r 1               	.export		_new_apple
000000r 1               	.export		_menu
000000r 1               	.export		_new_game
000000r 1               	.export		_run
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _j:
000000r 1  00           	.byte	$00
000001r 1               _addr:
000001r 1  00 00        	.word	$0000
000003r 1               _seed:
000003r 1  00 00        	.word	$0000
000005r 1               _grow:
000005r 1  02           	.byte	$02
000006r 1               _score:
000006r 1  00 00        	.word	$0000
000008r 1               _ticks:
000008r 1  00           	.byte	$00
000009r 1               _game_speed:
000009r 1  0C           	.byte	$0C
00000Ar 1               _crashed:
00000Ar 1  00           	.byte	$00
00000Br 1               _buffer:
00000Br 1  00           	.byte	$00
00000Cr 1  00 00 00 00  	.res	4095,$00
000010r 1  00 00 00 00  
000014r 1  00 00 00 00  
00100Br 1               _buffer_head:
00100Br 1  00 00        	.word	$0000
00100Dr 1               _buffer_tail:
00100Dr 1  00 00        	.word	$0000
00100Fr 1               
00100Fr 1               .segment	"RODATA"
000000r 1               
000000r 1               L0076:
000000r 1  50 52 45 53  	.byte	$50,$52,$45,$53,$53,$20,$41,$4E,$59,$20,$4B,$45,$59,$20,$54,$4F
000004r 1  53 20 41 4E  
000008r 1  59 20 4B 45  
000010r 1  20 50 4C 41  	.byte	$20,$50,$4C,$41,$59,$00
000014r 1  59 00        
000016r 1               L0072:
000016r 1  42 59 20 50  	.byte	$42,$59,$20,$50,$52,$4F,$44,$55,$43,$54,$49,$4F,$4E,$2D,$44,$41
00001Ar 1  52 4F 44 55  
00001Er 1  43 54 49 4F  
000026r 1  56 45 00     	.byte	$56,$45,$00
000029r 1               L006E:
000029r 1  53 4E 41 4B  	.byte	$53,$4E,$41,$4B,$45,$20,$36,$35,$30,$32,$20,$2D,$20,$56,$31,$2E
00002Dr 1  45 20 36 35  
000031r 1  30 32 20 2D  
000039r 1  30 00        	.byte	$30,$00
00003Br 1               L0150:
00003Br 1  46 72 65 65  	.byte	$46,$72,$65,$65,$20,$6D,$65,$6D,$6F,$72,$79,$3A,$20,$25,$64,$0A
00003Fr 1  20 6D 65 6D  
000043r 1  6F 72 79 3A  
00004Br 1  00           	.byte	$00
00004Cr 1               L00C2:
00004Cr 1  45 53 43 41  	.byte	$45,$53,$43,$41,$50,$45,$20,$50,$52,$45,$53,$53,$45,$44,$00
000050r 1  50 45 20 50  
000054r 1  52 45 53 53  
00005Br 1               L00FF:
00005Br 1  58 20 42 6F  	.byte	$58,$20,$42,$6F,$75,$6E,$64,$61,$72,$79,$0A,$00
00005Fr 1  75 6E 64 61  
000063r 1  72 79 0A 00  
000067r 1               L010A:
000067r 1  59 20 42 6F  	.byte	$59,$20,$42,$6F,$75,$6E,$64,$61,$72,$79,$0A,$00
00006Br 1  75 6E 64 61  
00006Fr 1  72 79 0A 00  
000073r 1               L011C:
000073r 1  48 49 54 20  	.byte	$48,$49,$54,$20,$54,$41,$49,$4C,$0A,$00
000077r 1  54 41 49 4C  
00007Br 1  0A 00        
00007Dr 1               L007A:
00007Dr 1  53 43 4F 52  	.byte	$53,$43,$4F,$52,$45,$3A,$20,$25,$64,$00
000081r 1  45 3A 20 25  
000085r 1  64 00        
000087r 1               L0084:
000087r 1  43 52 41 53  	.byte	$43,$52,$41,$53,$48,$45,$44,$00
00008Br 1  48 45 44 00  
00008Fr 1               
00008Fr 1               .segment	"BSS"
000000r 1               
000000r 1               _x:
000000r 1  00           	.res	1,$00
000001r 1               _y:
000001r 1  00           	.res	1,$00
000002r 1               _c:
000002r 1  00           	.res	1,$00
000003r 1               _r:
000003r 1  00           	.res	1,$00
000004r 1               _i:
000004r 1  00           	.res	1,$00
000005r 1               _head:
000005r 1  00 00 00     	.res	3,$00
000008r 1               _apple:
000008r 1  00 00        	.res	2,$00
00000Ar 1               _tb:
00000Ar 1  00 00 00 00  	.res	40,$00
00000Er 1  00 00 00 00  
000012r 1  00 00 00 00  
000032r 1               
000032r 1               ; ---------------------------------------------------------------
000032r 1               ; void __near__ print_at_xy (unsigned char, unsigned char, __near__ unsigned char *)
000032r 1               ; ---------------------------------------------------------------
000032r 1               
000032r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_print_at_xy: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     pushax
000003r 1  A0 02        	ldy     #$02
000005r 1  A2 00        	ldx     #$00
000007r 1  B1 rr        	lda     (sp),y
000009r 1  20 rr rr     	jsr     shlax4
00000Cr 1  20 rr rr     	jsr     shlax1
00000Fr 1  20 rr rr     	jsr     pushax
000012r 1  A2 06        	ldx     #$06
000014r 1  A9 00        	lda     #$00
000016r 1  20 rr rr     	jsr     tosaddax
000019r 1  20 rr rr     	jsr     pushax
00001Cr 1  A0 05        	ldy     #$05
00001Er 1  A2 00        	ldx     #$00
000020r 1  B1 rr        	lda     (sp),y
000022r 1  20 rr rr     	jsr     tosaddax
000025r 1  8D rr rr     	sta     _addr
000028r 1  8E rr rr     	stx     _addr+1
00002Br 1  AD rr rr     L0012:	lda     _addr
00002Er 1  AE rr rr     	ldx     _addr+1
000031r 1  20 rr rr     	jsr     pushax
000034r 1  A0 03        	ldy     #$03
000036r 1  20 rr rr     	jsr     ldaxysp
000039r 1  A0 00        	ldy     #$00
00003Br 1  20 rr rr     	jsr     ldauidx
00003Er 1  A0 00        	ldy     #$00
000040r 1  20 rr rr     	jsr     staspidx
000043r 1  A0 00        	ldy     #$00
000045r 1  A2 00        	ldx     #$00
000047r 1  A9 01        	lda     #$01
000049r 1  20 rr rr     	jsr     addeqysp
00004Cr 1  EE rr rr     	inc     _addr
00004Fr 1  D0 03        	bne     L0019
000051r 1  EE rr rr     	inc     _addr+1
000054r 1  AD rr rr     L0019:	lda     _addr
000057r 1  AE rr rr     	ldx     _addr+1
00005Ar 1  A0 01        	ldy     #$01
00005Cr 1  20 rr rr     	jsr     ldaxysp
00005Fr 1  A0 00        	ldy     #$00
000061r 1  20 rr rr     	jsr     ldauidx
000064r 1  C9 00        	cmp     #$00
000066r 1  20 rr rr     	jsr     boolne
000069r 1  D0 C0        	jne     L0012
00006Br 1  20 rr rr     	jsr     incsp4
00006Er 1  60           	rts
00006Fr 1               
00006Fr 1               .endproc
00006Fr 1               
00006Fr 1               ; ---------------------------------------------------------------
00006Fr 1               ; void __near__ set_pattern_color (unsigned char, unsigned char)
00006Fr 1               ; ---------------------------------------------------------------
00006Fr 1               
00006Fr 1               .segment	"CODE"
00006Fr 1               
00006Fr 1               .proc	_set_pattern_color: near
00006Fr 1               
00006Fr 1               .segment	"CODE"
00006Fr 1               
00006Fr 1  20 rr rr     	jsr     pusha
000072r 1  A0 01        	ldy     #$01
000074r 1  A2 00        	ldx     #$00
000076r 1  B1 rr        	lda     (sp),y
000078r 1  20 rr rr     	jsr     shlax3
00007Br 1  20 rr rr     	jsr     pushax
00007Er 1  A2 20        	ldx     #$20
000080r 1  A9 00        	lda     #$00
000082r 1  20 rr rr     	jsr     tosaddax
000085r 1  20 rr rr     	jsr     _vdp_set_write_address
000088r 1  A2 00        	ldx     #$00
00008Ar 1  A9 00        	lda     #$00
00008Cr 1  8D rr rr     	sta     _i
00008Fr 1  A2 00        L001E:	ldx     #$00
000091r 1  AD rr rr     	lda     _i
000094r 1  C9 08        	cmp     #$08
000096r 1  20 rr rr     	jsr     boolult
000099r 1  F0 03 4C rr  	jne     L0021
00009Dr 1  rr           
00009Er 1  4C rr rr     	jmp     L001F
0000A1r 1  A0 00        L0021:	ldy     #$00
0000A3r 1  A2 00        	ldx     #$00
0000A5r 1  B1 rr        	lda     (sp),y
0000A7r 1  8D 40 7F     	sta     $7F40
0000AAr 1  A2 00        	ldx     #$00
0000ACr 1  EE rr rr     	inc     _i
0000AFr 1  AD rr rr     	lda     _i
0000B2r 1  4C rr rr     	jmp     L001E
0000B5r 1  20 rr rr     L001F:	jsr     incsp2
0000B8r 1  60           	rts
0000B9r 1               
0000B9r 1               .endproc
0000B9r 1               
0000B9r 1               ; ---------------------------------------------------------------
0000B9r 1               ; void __near__ init_game (void)
0000B9r 1               ; ---------------------------------------------------------------
0000B9r 1               
0000B9r 1               .segment	"CODE"
0000B9r 1               
0000B9r 1               .proc	_init_game: near
0000B9r 1               
0000B9r 1               .segment	"CODE"
0000B9r 1               
0000B9r 1  A0 00        	ldy     #$00
0000BBr 1  20 rr rr     	jsr     _vdp_init_g2
0000BEr 1  A2 20        	ldx     #$20
0000C0r 1  A9 00        	lda     #$00
0000C2r 1  20 rr rr     	jsr     _vdp_set_write_address
0000C5r 1  A2 00        	ldx     #$00
0000C7r 1  A9 00        	lda     #$00
0000C9r 1  8D rr rr     	sta     _addr
0000CCr 1  8E rr rr     	stx     _addr+1
0000CFr 1  AD rr rr     L002C:	lda     _addr
0000D2r 1  AE rr rr     	ldx     _addr+1
0000D5r 1  E0 08        	cpx     #$08
0000D7r 1  20 rr rr     	jsr     boolult
0000DAr 1  F0 03 4C rr  	jne     L002F
0000DEr 1  rr           
0000DFr 1  4C rr rr     	jmp     L002D
0000E2r 1  A2 00        L002F:	ldx     #$00
0000E4r 1  A9 E1        	lda     #$E1
0000E6r 1  8D 40 7F     	sta     $7F40
0000E9r 1  EE rr rr     	inc     _addr
0000ECr 1  D0 03        	bne     L0034
0000EEr 1  EE rr rr     	inc     _addr+1
0000F1r 1  AD rr rr     L0034:	lda     _addr
0000F4r 1  AE rr rr     	ldx     _addr+1
0000F7r 1  4C rr rr     	jmp     L002C
0000FAr 1  A9 01        L002D:	lda     #$01
0000FCr 1  20 rr rr     	jsr     pusha
0000FFr 1  A9 61        	lda     #$61
000101r 1  20 rr rr     	jsr     _set_pattern_color
000104r 1  A9 02        	lda     #$02
000106r 1  20 rr rr     	jsr     pusha
000109r 1  A9 61        	lda     #$61
00010Br 1  20 rr rr     	jsr     _set_pattern_color
00010Er 1  A9 03        	lda     #$03
000110r 1  20 rr rr     	jsr     pusha
000113r 1  A9 61        	lda     #$61
000115r 1  20 rr rr     	jsr     _set_pattern_color
000118r 1  A9 04        	lda     #$04
00011Ar 1  20 rr rr     	jsr     pusha
00011Dr 1  A9 61        	lda     #$61
00011Fr 1  20 rr rr     	jsr     _set_pattern_color
000122r 1  A9 05        	lda     #$05
000124r 1  20 rr rr     	jsr     pusha
000127r 1  A9 21        	lda     #$21
000129r 1  20 rr rr     	jsr     _set_pattern_color
00012Cr 1  60           	rts
00012Dr 1               
00012Dr 1               .endproc
00012Dr 1               
00012Dr 1               ; ---------------------------------------------------------------
00012Dr 1               ; void __near__ print_center_y (unsigned char, __near__ unsigned char *)
00012Dr 1               ; ---------------------------------------------------------------
00012Dr 1               
00012Dr 1               .segment	"CODE"
00012Dr 1               
00012Dr 1               .proc	_print_center_y: near
00012Dr 1               
00012Dr 1               .segment	"CODE"
00012Dr 1               
00012Dr 1  20 rr rr     	jsr     pushax
000130r 1  A0 01        	ldy     #$01
000132r 1  20 rr rr     	jsr     ldaxysp
000135r 1  20 rr rr     	jsr     _strlen
000138r 1  A2 00        	ldx     #$00
00013Ar 1  20 rr rr     	jsr     pusha
00013Dr 1  A2 00        	ldx     #$00
00013Fr 1  A9 0F        	lda     #$0F
000141r 1  20 rr rr     	jsr     pushax
000144r 1  A0 02        	ldy     #$02
000146r 1  A2 00        	ldx     #$00
000148r 1  B1 rr        	lda     (sp),y
00014Ar 1  20 rr rr     	jsr     shrax1
00014Dr 1  20 rr rr     	jsr     tossubax
000150r 1  A2 00        	ldx     #$00
000152r 1  20 rr rr     	jsr     pusha
000155r 1  A0 00        	ldy     #$00
000157r 1  B1 rr        	lda     (sp),y
000159r 1  20 rr rr     	jsr     pusha
00015Cr 1  A0 05        	ldy     #$05
00015Er 1  B1 rr        	lda     (sp),y
000160r 1  20 rr rr     	jsr     pusha
000163r 1  A0 05        	ldy     #$05
000165r 1  20 rr rr     	jsr     ldaxysp
000168r 1  20 rr rr     	jsr     _print_at_xy
00016Br 1  20 rr rr     	jsr     incsp5
00016Er 1  60           	rts
00016Fr 1               
00016Fr 1               .endproc
00016Fr 1               
00016Fr 1               ; ---------------------------------------------------------------
00016Fr 1               ; void __near__ new_apple (void)
00016Fr 1               ; ---------------------------------------------------------------
00016Fr 1               
00016Fr 1               .segment	"CODE"
00016Fr 1               
00016Fr 1               .proc	_new_apple: near
00016Fr 1               
00016Fr 1               .segment	"CODE"
00016Fr 1               
00016Fr 1  A9 01        	lda     #$01
000171r 1  20 rr rr     	jsr     pusha
000174r 1  4C rr rr     	jmp     L005B
000177r 1  20 rr rr     L0051:	jsr     _rand
00017Ar 1  20 rr rr     	jsr     pushax
00017Dr 1  A2 00        	ldx     #$00
00017Fr 1  A9 20        	lda     #$20
000181r 1  20 rr rr     	jsr     tosmodax
000184r 1  A2 00        	ldx     #$00
000186r 1  8D rr rr     	sta     _x
000189r 1  20 rr rr     	jsr     _rand
00018Cr 1  20 rr rr     	jsr     pushax
00018Fr 1  A2 00        	ldx     #$00
000191r 1  A9 18        	lda     #$18
000193r 1  20 rr rr     	jsr     tosmodax
000196r 1  A2 00        	ldx     #$00
000198r 1  8D rr rr     	sta     _y
00019Br 1  AD rr rr     	lda     _x
00019Er 1  20 rr rr     	jsr     pusha
0001A1r 1  AD rr rr     	lda     _y
0001A4r 1  20 rr rr     	jsr     _vdp_read_from_screen_xy
0001A7r 1  C9 20        	cmp     #$20
0001A9r 1  20 rr rr     	jsr     booleq
0001ACr 1  D0 03 4C rr  	jeq     L005B
0001B0r 1  rr           
0001B1r 1  A2 00        	ldx     #$00
0001B3r 1  A9 00        	lda     #$00
0001B5r 1  A0 00        	ldy     #$00
0001B7r 1  91 rr        	sta     (sp),y
0001B9r 1  A2 00        	ldx     #$00
0001BBr 1  AD rr rr     	lda     _x
0001BEr 1  8D rr rr     	sta     _apple
0001C1r 1  A2 00        	ldx     #$00
0001C3r 1  AD rr rr     	lda     _y
0001C6r 1  8D rr rr     	sta     _apple+1
0001C9r 1  A0 00        L005B:	ldy     #$00
0001CBr 1  B1 rr        	lda     (sp),y
0001CDr 1  D0 A8        	jne     L0051
0001CFr 1  AD rr rr     	lda     _apple
0001D2r 1  20 rr rr     	jsr     pusha
0001D5r 1  AD rr rr     	lda     _apple+1
0001D8r 1  20 rr rr     	jsr     pusha
0001DBr 1  A9 05        	lda     #$05
0001DDr 1  20 rr rr     	jsr     _vdp_write_to_screen_xy
0001E0r 1  A2 00        	ldx     #$00
0001E2r 1  A9 02        	lda     #$02
0001E4r 1  8D rr rr     	sta     _grow
0001E7r 1  20 rr rr     	jsr     incsp1
0001EAr 1  60           	rts
0001EBr 1               
0001EBr 1               .endproc
0001EBr 1               
0001EBr 1               ; ---------------------------------------------------------------
0001EBr 1               ; unsigned char __near__ menu (void)
0001EBr 1               ; ---------------------------------------------------------------
0001EBr 1               
0001EBr 1               .segment	"CODE"
0001EBr 1               
0001EBr 1               .proc	_menu: near
0001EBr 1               
0001EBr 1               .segment	"CODE"
0001EBr 1               
0001EBr 1  A9 03        	lda     #$03
0001EDr 1  20 rr rr     	jsr     pusha
0001F0r 1  A9 rr        	lda     #<(L006E)
0001F2r 1  A2 rr        	ldx     #>(L006E)
0001F4r 1  20 rr rr     	jsr     _print_center_y
0001F7r 1  A9 05        	lda     #$05
0001F9r 1  20 rr rr     	jsr     pusha
0001FCr 1  A9 rr        	lda     #<(L0072)
0001FEr 1  A2 rr        	ldx     #>(L0072)
000200r 1  20 rr rr     	jsr     _print_center_y
000203r 1  A9 0D        	lda     #$0D
000205r 1  20 rr rr     	jsr     pusha
000208r 1  A9 rr        	lda     #<(L0076)
00020Ar 1  A2 rr        	ldx     #>(L0076)
00020Cr 1  20 rr rr     	jsr     _print_center_y
00020Fr 1  A9 rr        	lda     #<(_tb)
000211r 1  A2 rr        	ldx     #>(_tb)
000213r 1  20 rr rr     	jsr     pushax
000216r 1  A9 rr        	lda     #<(L007A)
000218r 1  A2 rr        	ldx     #>(L007A)
00021Ar 1  20 rr rr     	jsr     pushax
00021Dr 1  AD rr rr     	lda     _score
000220r 1  AE rr rr     	ldx     _score+1
000223r 1  20 rr rr     	jsr     pushax
000226r 1  A0 06        	ldy     #$06
000228r 1  20 rr rr     	jsr     _sprintf
00022Br 1  A9 07        	lda     #$07
00022Dr 1  20 rr rr     	jsr     pusha
000230r 1  A9 rr        	lda     #<(_tb)
000232r 1  A2 rr        	ldx     #>(_tb)
000234r 1  20 rr rr     	jsr     _print_center_y
000237r 1  A2 00        	ldx     #$00
000239r 1  AD rr rr     	lda     _crashed
00023Cr 1  C9 01        	cmp     #$01
00023Er 1  20 rr rr     	jsr     booleq
000241r 1  D0 03 4C rr  	jeq     L0080
000245r 1  rr           
000246r 1  A9 17        	lda     #$17
000248r 1  20 rr rr     	jsr     pusha
00024Br 1  A9 rr        	lda     #<(L0084)
00024Dr 1  A2 rr        	ldx     #>(L0084)
00024Fr 1  20 rr rr     	jsr     _print_center_y
000252r 1  A0 00        L0080:	ldy     #$00
000254r 1  20 rr rr     	jsr     _vdp_wait
000257r 1  A0 00        	ldy     #$00
000259r 1  20 rr rr     	jsr     _vdp_flush
00025Cr 1  A2 00        	ldx     #$00
00025Er 1  A9 00        	lda     #$00
000260r 1  8D rr rr     	sta     _seed
000263r 1  8E rr rr     	stx     _seed+1
000266r 1  A0 00        L008A:	ldy     #$00
000268r 1  20 rr rr     	jsr     _cgetc_nw
00026Br 1  8D rr rr     	sta     _c
00026Er 1  EE rr rr     	inc     _seed
000271r 1  D0 03        	bne     L0090
000273r 1  EE rr rr     	inc     _seed+1
000276r 1  AD rr rr     L0090:	lda     _seed
000279r 1  AE rr rr     	ldx     _seed+1
00027Cr 1  A2 00        	ldx     #$00
00027Er 1  AD rr rr     	lda     _c
000281r 1  C9 00        	cmp     #$00
000283r 1  20 rr rr     	jsr     booleq
000286r 1  D0 DE        	jne     L008A
000288r 1  A2 00        	ldx     #$00
00028Ar 1  AD rr rr     	lda     _c
00028Dr 1  C9 1B        	cmp     #$1B
00028Fr 1  20 rr rr     	jsr     booleq
000292r 1  D0 03 4C rr  	jeq     L0092
000296r 1  rr           
000297r 1  A2 00        	ldx     #$00
000299r 1  A9 00        	lda     #$00
00029Br 1  4C rr rr     	jmp     L0095
00029Er 1  4C rr rr     	jmp     L0095
0002A1r 1  AD rr rr     L0092:	lda     _seed
0002A4r 1  AE rr rr     	ldx     _seed+1
0002A7r 1  20 rr rr     	jsr     _srand
0002AAr 1  A2 00        	ldx     #$00
0002ACr 1  A9 01        	lda     #$01
0002AEr 1  4C rr rr     	jmp     L0095
0002B1r 1  60           L0095:	rts
0002B2r 1               
0002B2r 1               .endproc
0002B2r 1               
0002B2r 1               ; ---------------------------------------------------------------
0002B2r 1               ; void __near__ new_game (void)
0002B2r 1               ; ---------------------------------------------------------------
0002B2r 1               
0002B2r 1               .segment	"CODE"
0002B2r 1               
0002B2r 1               .proc	_new_game: near
0002B2r 1               
0002B2r 1               .segment	"CODE"
0002B2r 1               
0002B2r 1  A2 06        	ldx     #$06
0002B4r 1  A9 00        	lda     #$00
0002B6r 1  20 rr rr     	jsr     pushax
0002B9r 1  A2 00        	ldx     #$00
0002BBr 1  A9 20        	lda     #$20
0002BDr 1  20 rr rr     	jsr     pushax
0002C0r 1  A2 03        	ldx     #$03
0002C2r 1  A9 00        	lda     #$00
0002C4r 1  20 rr rr     	jsr     _memset
0002C7r 1  A2 00        	ldx     #$00
0002C9r 1  A9 00        	lda     #$00
0002CBr 1  8D rr rr     	sta     _buffer_head
0002CEr 1  8E rr rr     	stx     _buffer_head+1
0002D1r 1  A2 00        	ldx     #$00
0002D3r 1  A9 00        	lda     #$00
0002D5r 1  8D rr rr     	sta     _buffer_tail
0002D8r 1  8E rr rr     	stx     _buffer_tail+1
0002DBr 1  A2 00        	ldx     #$00
0002DDr 1  A9 0F        	lda     #$0F
0002DFr 1  8D rr rr     	sta     _head
0002E2r 1  A2 00        	ldx     #$00
0002E4r 1  A9 14        	lda     #$14
0002E6r 1  8D rr rr     	sta     _head+1
0002E9r 1  A2 00        	ldx     #$00
0002EBr 1  A9 04        	lda     #$04
0002EDr 1  8D rr rr     	sta     _head+2
0002F0r 1  A2 00        	ldx     #$00
0002F2r 1  A9 08        	lda     #$08
0002F4r 1  8D rr rr     	sta     _game_speed
0002F7r 1  A2 00        	ldx     #$00
0002F9r 1  A9 00        	lda     #$00
0002FBr 1  8D rr rr     	sta     _ticks
0002FEr 1  A2 00        	ldx     #$00
000300r 1  A9 00        	lda     #$00
000302r 1  8D rr rr     	sta     _crashed
000305r 1  A2 00        	ldx     #$00
000307r 1  A9 02        	lda     #$02
000309r 1  8D rr rr     	sta     _grow
00030Cr 1  A2 00        	ldx     #$00
00030Er 1  A9 00        	lda     #$00
000310r 1  8D rr rr     	sta     _score
000313r 1  8E rr rr     	stx     _score+1
000316r 1  20 rr rr     	jsr     _new_apple
000319r 1  A0 00        	ldy     #$00
00031Br 1  20 rr rr     	jsr     _vdp_wait
00031Er 1  A0 00        	ldy     #$00
000320r 1  20 rr rr     	jsr     _vdp_flush
000323r 1  60           	rts
000324r 1               
000324r 1               .endproc
000324r 1               
000324r 1               ; ---------------------------------------------------------------
000324r 1               ; void __near__ run (void)
000324r 1               ; ---------------------------------------------------------------
000324r 1               
000324r 1               .segment	"CODE"
000324r 1               
000324r 1               .proc	_run: near
000324r 1               
000324r 1               .segment	"CODE"
000324r 1               
000324r 1  A2 00        L00B6:	ldx     #$00
000326r 1  AD rr rr     	lda     _ticks
000329r 1  20 rr rr     	jsr     pushax
00032Cr 1  A2 00        	ldx     #$00
00032Er 1  AD rr rr     	lda     _game_speed
000331r 1  20 rr rr     	jsr     toseqax
000334r 1  D0 03 4C rr  	jeq     L00B9
000338r 1  rr           
000339r 1  A0 00        	ldy     #$00
00033Br 1  20 rr rr     	jsr     _cgetc_nw
00033Er 1  8D rr rr     	sta     _c
000341r 1  A2 00        	ldx     #$00
000343r 1  AD rr rr     	lda     _c
000346r 1  C9 1B        	cmp     #$1B
000348r 1  20 rr rr     	jsr     booleq
00034Br 1  D0 03 4C rr  	jeq     L00BD
00034Fr 1  rr           
000350r 1  A2 00        	ldx     #$00
000352r 1  A9 01        	lda     #$01
000354r 1  8D rr rr     	sta     _crashed
000357r 1  A9 rr        	lda     #<(L00C2)
000359r 1  A2 rr        	ldx     #>(L00C2)
00035Br 1  20 rr rr     	jsr     _cputs
00035Er 1  4C rr rr     	jmp     L00DC
000361r 1  A2 00        L00BD:	ldx     #$00
000363r 1  AD rr rr     	lda     _c
000366r 1  C9 A1        	cmp     #$A1
000368r 1  20 rr rr     	jsr     booleq
00036Br 1  D0 03 4C rr  	jeq     L00C5
00036Fr 1  rr           
000370r 1  A2 00        	ldx     #$00
000372r 1  AD rr rr     	lda     _head+2
000375r 1  C9 04        	cmp     #$04
000377r 1  20 rr rr     	jsr     boolne
00037Ar 1  D0 03 4C rr  	jeq     L00C7
00037Er 1  rr           
00037Fr 1  A2 00        	ldx     #$00
000381r 1  A9 03        	lda     #$03
000383r 1  8D rr rr     	sta     _head+2
000386r 1  4C rr rr     L00C7:	jmp     L00DC
000389r 1  A2 00        L00C5:	ldx     #$00
00038Br 1  AD rr rr     	lda     _c
00038Er 1  C9 A2        	cmp     #$A2
000390r 1  20 rr rr     	jsr     booleq
000393r 1  D0 03 4C rr  	jeq     L00CC
000397r 1  rr           
000398r 1  A2 00        	ldx     #$00
00039Ar 1  AD rr rr     	lda     _head+2
00039Dr 1  C9 03        	cmp     #$03
00039Fr 1  20 rr rr     	jsr     boolne
0003A2r 1  D0 03 4C rr  	jeq     L00CE
0003A6r 1  rr           
0003A7r 1  A2 00        	ldx     #$00
0003A9r 1  A9 04        	lda     #$04
0003ABr 1  8D rr rr     	sta     _head+2
0003AEr 1  4C rr rr     L00CE:	jmp     L00DC
0003B1r 1  A2 00        L00CC:	ldx     #$00
0003B3r 1  AD rr rr     	lda     _c
0003B6r 1  C9 A3        	cmp     #$A3
0003B8r 1  20 rr rr     	jsr     booleq
0003BBr 1  D0 03 4C rr  	jeq     L00D3
0003BFr 1  rr           
0003C0r 1  A2 00        	ldx     #$00
0003C2r 1  AD rr rr     	lda     _head+2
0003C5r 1  C9 02        	cmp     #$02
0003C7r 1  20 rr rr     	jsr     boolne
0003CAr 1  D0 03 4C rr  	jeq     L00D5
0003CEr 1  rr           
0003CFr 1  A2 00        	ldx     #$00
0003D1r 1  A9 01        	lda     #$01
0003D3r 1  8D rr rr     	sta     _head+2
0003D6r 1  4C rr rr     L00D5:	jmp     L00DC
0003D9r 1  A2 00        L00D3:	ldx     #$00
0003DBr 1  AD rr rr     	lda     _c
0003DEr 1  C9 A4        	cmp     #$A4
0003E0r 1  20 rr rr     	jsr     booleq
0003E3r 1  D0 03 4C rr  	jeq     L00DC
0003E7r 1  rr           
0003E8r 1  A2 00        	ldx     #$00
0003EAr 1  AD rr rr     	lda     _head+2
0003EDr 1  C9 01        	cmp     #$01
0003EFr 1  20 rr rr     	jsr     boolne
0003F2r 1  D0 03 4C rr  	jeq     L00DC
0003F6r 1  rr           
0003F7r 1  A2 00        	ldx     #$00
0003F9r 1  A9 02        	lda     #$02
0003FBr 1  8D rr rr     	sta     _head+2
0003FEr 1  A2 00        L00DC:	ldx     #$00
000400r 1  AD rr rr     	lda     _head+2
000403r 1  C9 03        	cmp     #$03
000405r 1  20 rr rr     	jsr     booleq
000408r 1  D0 03 4C rr  	jeq     L00E0
00040Cr 1  rr           
00040Dr 1  A2 00        	ldx     #$00
00040Fr 1  AD rr rr     	lda     _head
000412r 1  10 01        	bpl     L00E3
000414r 1  CA           	dex
000415r 1  CE rr rr     L00E3:	dec     _head
000418r 1  4C rr rr     	jmp     L00F3
00041Br 1  A2 00        L00E0:	ldx     #$00
00041Dr 1  AD rr rr     	lda     _head+2
000420r 1  C9 04        	cmp     #$04
000422r 1  20 rr rr     	jsr     booleq
000425r 1  D0 03 4C rr  	jeq     L00E5
000429r 1  rr           
00042Ar 1  A2 00        	ldx     #$00
00042Cr 1  AD rr rr     	lda     _head
00042Fr 1  10 01        	bpl     L00E8
000431r 1  CA           	dex
000432r 1  EE rr rr     L00E8:	inc     _head
000435r 1  4C rr rr     	jmp     L00F3
000438r 1  A2 00        L00E5:	ldx     #$00
00043Ar 1  AD rr rr     	lda     _head+2
00043Dr 1  C9 01        	cmp     #$01
00043Fr 1  20 rr rr     	jsr     booleq
000442r 1  D0 03 4C rr  	jeq     L00EA
000446r 1  rr           
000447r 1  A2 00        	ldx     #$00
000449r 1  AD rr rr     	lda     _head+1
00044Cr 1  10 01        	bpl     L00ED
00044Er 1  CA           	dex
00044Fr 1  CE rr rr     L00ED:	dec     _head+1
000452r 1  4C rr rr     	jmp     L00F3
000455r 1  A2 00        L00EA:	ldx     #$00
000457r 1  AD rr rr     	lda     _head+2
00045Ar 1  C9 02        	cmp     #$02
00045Cr 1  20 rr rr     	jsr     booleq
00045Fr 1  D0 03 4C rr  	jeq     L00EF
000463r 1  rr           
000464r 1  A2 00        	ldx     #$00
000466r 1  AD rr rr     	lda     _head+1
000469r 1  10 01        	bpl     L00F2
00046Br 1  CA           	dex
00046Cr 1  EE rr rr     L00F2:	inc     _head+1
00046Fr 1  4C rr rr     	jmp     L00F3
000472r 1  A2 00        L00EF:	ldx     #$00
000474r 1  A9 00        	lda     #$00
000476r 1  8D rr rr     	sta     _crashed
000479r 1  A2 00        L00F3:	ldx     #$00
00047Br 1  AD rr rr     	lda     _head
00047Er 1  10 01        	bpl     L00F8
000480r 1  CA           	dex
000481r 1  0A           L00F8:	asl     a
000482r 1  A9 00        	lda     #$00
000484r 1  A2 00        	ldx     #$00
000486r 1  2A           	rol     a
000487r 1  F0 03 4C rr  	jne     L00F7
00048Br 1  rr           
00048Cr 1  A2 00        	ldx     #$00
00048Er 1  AD rr rr     	lda     _head
000491r 1  10 01        	bpl     L00F9
000493r 1  CA           	dex
000494r 1  38           L00F9:	sec
000495r 1  E9 20        	sbc     #$20
000497r 1  70 02        	bvs     L00FA
000499r 1  49 80        	eor     #$80
00049Br 1  0A           L00FA:	asl     a
00049Cr 1  A9 00        	lda     #$00
00049Er 1  A2 00        	ldx     #$00
0004A0r 1  2A           	rol     a
0004A1r 1  F0 03 4C rr  	jne     L00F7
0004A5r 1  rr           
0004A6r 1  A2 00        	ldx     #$00
0004A8r 1  A9 00        	lda     #$00
0004AAr 1  D0 03 4C rr  	jeq     L00FB
0004AEr 1  rr           
0004AFr 1  A2 00        L00F7:	ldx     #$00
0004B1r 1  A9 01        	lda     #$01
0004B3r 1  D0 03 4C rr  L00FB:	jeq     L00F6
0004B7r 1  rr           
0004B8r 1  A2 00        	ldx     #$00
0004BAr 1  A9 01        	lda     #$01
0004BCr 1  8D rr rr     	sta     _crashed
0004BFr 1  A9 rr        	lda     #<(L00FF)
0004C1r 1  A2 rr        	ldx     #>(L00FF)
0004C3r 1  20 rr rr     	jsr     _cputs
0004C6r 1  A2 00        L00F6:	ldx     #$00
0004C8r 1  AD rr rr     	lda     _head+1
0004CBr 1  10 01        	bpl     L0103
0004CDr 1  CA           	dex
0004CEr 1  0A           L0103:	asl     a
0004CFr 1  A9 00        	lda     #$00
0004D1r 1  A2 00        	ldx     #$00
0004D3r 1  2A           	rol     a
0004D4r 1  F0 03 4C rr  	jne     L0102
0004D8r 1  rr           
0004D9r 1  A2 00        	ldx     #$00
0004DBr 1  AD rr rr     	lda     _head+1
0004DEr 1  10 01        	bpl     L0104
0004E0r 1  CA           	dex
0004E1r 1  38           L0104:	sec
0004E2r 1  E9 18        	sbc     #$18
0004E4r 1  70 02        	bvs     L0105
0004E6r 1  49 80        	eor     #$80
0004E8r 1  0A           L0105:	asl     a
0004E9r 1  A9 00        	lda     #$00
0004EBr 1  A2 00        	ldx     #$00
0004EDr 1  2A           	rol     a
0004EEr 1  F0 03 4C rr  	jne     L0102
0004F2r 1  rr           
0004F3r 1  A2 00        	ldx     #$00
0004F5r 1  A9 00        	lda     #$00
0004F7r 1  D0 03 4C rr  	jeq     L0106
0004FBr 1  rr           
0004FCr 1  A2 00        L0102:	ldx     #$00
0004FEr 1  A9 01        	lda     #$01
000500r 1  D0 03 4C rr  L0106:	jeq     L0101
000504r 1  rr           
000505r 1  A2 00        	ldx     #$00
000507r 1  A9 01        	lda     #$01
000509r 1  8D rr rr     	sta     _crashed
00050Cr 1  A9 rr        	lda     #<(L010A)
00050Er 1  A2 rr        	ldx     #>(L010A)
000510r 1  20 rr rr     	jsr     _cputs
000513r 1  AD rr rr     L0101:	lda     _head
000516r 1  20 rr rr     	jsr     pusha
000519r 1  AD rr rr     	lda     _head+1
00051Cr 1  20 rr rr     	jsr     _vdp_read_from_screen_xy
00051Fr 1  8D rr rr     	sta     _r
000522r 1  A2 00        	ldx     #$00
000524r 1  AD rr rr     	lda     _r
000527r 1  C9 05        	cmp     #$05
000529r 1  20 rr rr     	jsr     booleq
00052Cr 1  D0 03 4C rr  	jeq     L0110
000530r 1  rr           
000531r 1  A9 05        	lda     #$05
000533r 1  18           	clc
000534r 1  6D rr rr     	adc     _score
000537r 1  8D rr rr     	sta     _score
00053Ar 1  90 03        	bcc     L0114
00053Cr 1  EE rr rr     	inc     _score+1
00053Fr 1  AE rr rr     L0114:	ldx     _score+1
000542r 1  20 rr rr     	jsr     _new_apple
000545r 1  4C rr rr     	jmp     L0117
000548r 1  A2 00        L0110:	ldx     #$00
00054Ar 1  AD rr rr     	lda     _r
00054Dr 1  C9 20        	cmp     #$20
00054Fr 1  20 rr rr     	jsr     boolne
000552r 1  D0 03 4C rr  	jeq     L0117
000556r 1  rr           
000557r 1  A2 00        	ldx     #$00
000559r 1  A9 01        	lda     #$01
00055Br 1  8D rr rr     	sta     _crashed
00055Er 1  A9 rr        	lda     #<(L011C)
000560r 1  A2 rr        	ldx     #>(L011C)
000562r 1  20 rr rr     	jsr     _cputs
000565r 1  A2 00        L0117:	ldx     #$00
000567r 1  AD rr rr     	lda     _crashed
00056Ar 1  C9 00        	cmp     #$00
00056Cr 1  20 rr rr     	jsr     booleq
00056Fr 1  D0 03 4C rr  	jeq     L011E
000573r 1  rr           
000574r 1  AD rr rr     	lda     _head
000577r 1  20 rr rr     	jsr     pusha
00057Ar 1  AD rr rr     	lda     _head+1
00057Dr 1  20 rr rr     	jsr     pusha
000580r 1  AD rr rr     	lda     _head+2
000583r 1  20 rr rr     	jsr     _vdp_write_to_screen_xy
000586r 1  AD rr rr     	lda     _buffer_head
000589r 1  AE rr rr     	ldx     _buffer_head+1
00058Cr 1  C9 01        	cmp     #$01
00058Er 1  8A           	txa
00058Fr 1  E9 10        	sbc     #$10
000591r 1  A9 00        	lda     #$00
000593r 1  A2 00        	ldx     #$00
000595r 1  2A           	rol     a
000596r 1  D0 03 4C rr  	jeq     L0124
00059Ar 1  rr           
00059Br 1  A2 00        	ldx     #$00
00059Dr 1  A9 00        	lda     #$00
00059Fr 1  8D rr rr     	sta     _buffer_head
0005A2r 1  8E rr rr     	stx     _buffer_head+1
0005A5r 1  A9 rr        L0124:	lda     #<(_buffer)
0005A7r 1  A2 rr        	ldx     #>(_buffer)
0005A9r 1  18           	clc
0005AAr 1  6D rr rr     	adc     _buffer_head
0005ADr 1  A8           	tay
0005AEr 1  8A           	txa
0005AFr 1  6D rr rr     	adc     _buffer_head+1
0005B2r 1  AA           	tax
0005B3r 1  98           	tya
0005B4r 1  20 rr rr     	jsr     pushax
0005B7r 1  A2 00        	ldx     #$00
0005B9r 1  AD rr rr     	lda     _head
0005BCr 1  A0 00        	ldy     #$00
0005BEr 1  20 rr rr     	jsr     staspidx
0005C1r 1  AD rr rr     	lda     _buffer_head
0005C4r 1  AE rr rr     	ldx     _buffer_head+1
0005C7r 1  1A           	ina
0005C8r 1  D0 01        	bne     L012D
0005CAr 1  E8           	inx
0005CBr 1  18           L012D:	clc
0005CCr 1  69 rr        	adc     #<(_buffer)
0005CEr 1  A8           	tay
0005CFr 1  8A           	txa
0005D0r 1  69 rr        	adc     #>(_buffer)
0005D2r 1  AA           	tax
0005D3r 1  98           	tya
0005D4r 1  20 rr rr     	jsr     pushax
0005D7r 1  A2 00        	ldx     #$00
0005D9r 1  AD rr rr     	lda     _head+1
0005DCr 1  A0 00        	ldy     #$00
0005DEr 1  20 rr rr     	jsr     staspidx
0005E1r 1  A9 02        	lda     #$02
0005E3r 1  18           	clc
0005E4r 1  6D rr rr     	adc     _buffer_head
0005E7r 1  8D rr rr     	sta     _buffer_head
0005EAr 1  90 03        	bcc     L0131
0005ECr 1  EE rr rr     	inc     _buffer_head+1
0005EFr 1  AE rr rr     L0131:	ldx     _buffer_head+1
0005F2r 1  A2 00        	ldx     #$00
0005F4r 1  AD rr rr     	lda     _grow
0005F7r 1  C9 00        	cmp     #$00
0005F9r 1  20 rr rr     	jsr     boolne
0005FCr 1  D0 03 4C rr  	jeq     L0132
000600r 1  rr           
000601r 1  A2 00        	ldx     #$00
000603r 1  AD rr rr     	lda     _grow
000606r 1  CE rr rr     	dec     _grow
000609r 1  4C rr rr     	jmp     L0140
00060Cr 1  A9 rr        L0132:	lda     #<(_buffer)
00060Er 1  A2 rr        	ldx     #>(_buffer)
000610r 1  18           	clc
000611r 1  6D rr rr     	adc     _buffer_tail
000614r 1  A8           	tay
000615r 1  8A           	txa
000616r 1  6D rr rr     	adc     _buffer_tail+1
000619r 1  AA           	tax
00061Ar 1  98           	tya
00061Br 1  A0 00        	ldy     #$00
00061Dr 1  20 rr rr     	jsr     ldauidx
000620r 1  20 rr rr     	jsr     pusha
000623r 1  AD rr rr     	lda     _buffer_tail
000626r 1  AE rr rr     	ldx     _buffer_tail+1
000629r 1  1A           	ina
00062Ar 1  D0 01        	bne     L013B
00062Cr 1  E8           	inx
00062Dr 1  18           L013B:	clc
00062Er 1  69 rr        	adc     #<(_buffer)
000630r 1  A8           	tay
000631r 1  8A           	txa
000632r 1  69 rr        	adc     #>(_buffer)
000634r 1  AA           	tax
000635r 1  98           	tya
000636r 1  A0 00        	ldy     #$00
000638r 1  20 rr rr     	jsr     ldauidx
00063Br 1  20 rr rr     	jsr     pusha
00063Er 1  A9 20        	lda     #$20
000640r 1  20 rr rr     	jsr     _vdp_write_to_screen_xy
000643r 1  A9 02        	lda     #$02
000645r 1  18           	clc
000646r 1  6D rr rr     	adc     _buffer_tail
000649r 1  8D rr rr     	sta     _buffer_tail
00064Cr 1  90 03        	bcc     L013F
00064Er 1  EE rr rr     	inc     _buffer_tail+1
000651r 1  AE rr rr     L013F:	ldx     _buffer_tail+1
000654r 1  AD rr rr     	lda     _buffer_tail
000657r 1  AE rr rr     	ldx     _buffer_tail+1
00065Ar 1  C9 01        	cmp     #$01
00065Cr 1  8A           	txa
00065Dr 1  E9 10        	sbc     #$10
00065Fr 1  A9 00        	lda     #$00
000661r 1  A2 00        	ldx     #$00
000663r 1  2A           	rol     a
000664r 1  D0 03 4C rr  	jeq     L0140
000668r 1  rr           
000669r 1  A2 00        	ldx     #$00
00066Br 1  A9 00        	lda     #$00
00066Dr 1  8D rr rr     	sta     _buffer_tail
000670r 1  8E rr rr     	stx     _buffer_tail+1
000673r 1  A0 00        L0140:	ldy     #$00
000675r 1  20 rr rr     	jsr     _vdp_wait
000678r 1  A0 00        	ldy     #$00
00067Ar 1  20 rr rr     	jsr     _vdp_flush
00067Dr 1  A2 00        	ldx     #$00
00067Fr 1  A9 00        	lda     #$00
000681r 1  8D rr rr     	sta     _ticks
000684r 1  4C rr rr     L011E:	jmp     L0148
000687r 1  A0 00        L00B9:	ldy     #$00
000689r 1  20 rr rr     	jsr     _vdp_wait
00068Cr 1  A2 00        	ldx     #$00
00068Er 1  AD rr rr     	lda     _ticks
000691r 1  EE rr rr     	inc     _ticks
000694r 1  A2 00        L0148:	ldx     #$00
000696r 1  AD rr rr     	lda     _crashed
000699r 1  C9 00        	cmp     #$00
00069Br 1  20 rr rr     	jsr     booleq
00069Er 1  F0 03 4C rr  	jne     L00B6
0006A2r 1  rr           
0006A3r 1  60           	rts
0006A4r 1               
0006A4r 1               .endproc
0006A4r 1               
0006A4r 1               ; ---------------------------------------------------------------
0006A4r 1               ; void __near__ main (void)
0006A4r 1               ; ---------------------------------------------------------------
0006A4r 1               
0006A4r 1               .segment	"CODE"
0006A4r 1               
0006A4r 1               .proc	_main: near
0006A4r 1               
0006A4r 1               .segment	"CODE"
0006A4r 1               
0006A4r 1  20 rr rr     	jsr     _init_game
0006A7r 1  A9 rr        	lda     #<(_tb)
0006A9r 1  A2 rr        	ldx     #>(_tb)
0006ABr 1  20 rr rr     	jsr     pushax
0006AEr 1  A9 rr        	lda     #<(L0150)
0006B0r 1  A2 rr        	ldx     #>(L0150)
0006B2r 1  20 rr rr     	jsr     pushax
0006B5r 1  20 rr rr     	jsr     __heapmaxavail
0006B8r 1  20 rr rr     	jsr     pushax
0006BBr 1  A0 06        	ldy     #$06
0006BDr 1  20 rr rr     	jsr     _sprintf
0006C0r 1  A9 rr        	lda     #<(_tb)
0006C2r 1  A2 rr        	ldx     #>(_tb)
0006C4r 1  20 rr rr     	jsr     _cputs
0006C7r 1  4C rr rr     	jmp     L015B
0006CAr 1  20 rr rr     L0155:	jsr     _menu
0006CDr 1  20 rr rr     	jsr     bnega
0006D0r 1  D0 03 4C rr  	jeq     L0159
0006D4r 1  rr           
0006D5r 1  4C rr rr     	jmp     L0156
0006D8r 1  4C rr rr     	jmp     L015B
0006DBr 1  20 rr rr     L0159:	jsr     _new_game
0006DEr 1  20 rr rr     	jsr     _run
0006E1r 1  4C rr rr     L015B:	jmp     L0155
0006E4r 1  60           L0156:	rts
0006E5r 1               
0006E5r 1               .endproc
0006E5r 1               
0006E5r 1               
